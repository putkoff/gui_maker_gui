import PySimpleGUI as sg
def create_new_element(element):
    keys = list(element.keys())
    for k in range(0,len(keys)):
        element[keys[k]] = create_element_by_type(get_desc()[keys[k]]["Type"])
    return element
def main():
    element_choices = get_element_choices()
    
    layout = [
        [sg.Text("Choose a GUI element:"), sg.Combo(list(element_choices.keys()), key="-ELEMENT_CHOICE-", readonly=True)],
        [sg.Button("Add Element")],
        [sg.Button("Create Layout"),sg.Button("finalize"), sg.Button("Exit")],
    ]

    window = sg.Window("GUI Builder", layout)

    user_layout = []

    while True:
        event, values = window.read()

        if event in (sg.WIN_CLOSED, "Exit"):
            break

        if event == "Add Element":
            choice = values["-ELEMENT_CHOICE-"]
            
            if choice:
                element_settings = create_element_by_type(element_choices[choice])
                new_element = create_element_window(choice)
                if new_element:
                    user_layout.append(new_element)

        if event == "Create Layout":
            if user_layout:
                print(user_layout)
                create_custom_window(user_layout)
        if event ==  "finalize":
            create_custom_window(user_layout)
    window.close()
def get_element_choices():
    return {'Button': {'button_text': '""', 'button_type': '7', 'target': ''}, 'bind': {'propagate': 'True'}, 'block_focus': {'block': 'True'}, 'click': {}, 'expand': {'expand_x': 'False', 'expand_y': 'False', 'expand_row': 'True'}, 'get_next_focus': {}, 'get_previous_focus': {}, 'get_size': {}, 'get_text': {}, 'grab_anywhere_exclude': {}, 'grab_anywhere_include': {}, 'hide_row': {}, 'set_cursor': {}, 'set_focus': {'force': 'False'}, 'set_size': {}, 'set_tooltip': {}, 'set_vscroll_position': {}, 'unbind': {}, 'unhide_row': {}, 'update': {'menu': 'None', 'tooltip': 'None', 'filename': 'None', 'data': 'None', 'data_base64': 'None'}, 'Click': {}, 'GetText': {}, 'SetFocus': {'force': 'False'}, 'SetTooltip': {}, 'Update': {'menu': 'None', 'tooltip': 'None', 'filename': 'None', 'data': 'None', 'data_base64': 'None'}, 'ButtonMenu': {'tooltip': 'None', 'disabled': 'False', 'image_source': 'None', 'image_filename': 'None', 'image_data': 'None', 'image_size': ''}, 'Canvas': {'canvas': 'None', 'background_color': 'None', 'size': ''}, 'Checkbox': {'default': 'False', 'size': ''}, 'get': {'default': 'None'}, 'Get': {}, 'Column': {'background_color': 'None', 'size': ''}, 'add_row': {'args': '*<1 or N object>'}, 'contents_changed': {}, 'layout': {}, 'AddRow': {'args': '*<1 or N object>'}, 'Layout': {}, 'Combo': {'default_value': 'None', 'size': ''}, 'Frame': {'title_color': 'None', 'background_color': 'None', 'title_location': 'None', 'relief': '"groove"', 'size': ''},'Graph': {'background_color': 'None', 'pad': 'None', 'p': 'None', 'change_submits': 'False', 'drag_submits': 'False', 'enable_events': 'False', 'motion_events': 'False', 'key': 'None', 'k': 'None', 'tooltip': 'None', 'right_click_menu': 'None', 'expand_x': 'False', 'expand_y': 'False', 'visible': 'True', 'float_values': 'False', 'border_width': '0', 'metadata': 'None'}, 'bring_figure_to_front': {}, 'change_coordinates': {}, 'delete_figure': {}, 'draw_arc': {'style': 'None', 'arc_color': '"black"', 'line_width': '1', 'fill_color': 'None'}, 'draw_circle': {'fill_color': 'None', 'line_color': '"black"', 'line_width': '1'}, 'draw_image': {'filename': 'None', 'data': 'None', 'location': ''}, 'draw_line': {'color': '"black"', 'width': '1'}, 'draw_oval': {'fill_color': 'None', 'line_color': 'None', 'line_width': '1'}, 'draw_point': {'size': '2', 'color': '"black"'}, 'draw_polygon': {'fill_color': 'None', 'line_color': 'None', 'line_width': 'None'}, 'draw_rectangle': {'fill_color': 'None', 'line_color': 'None', 'line_width': 'None'}, 'draw_text': {'color': '"black"', 'font': 'None', 'angle': '0', 'text_location': '"center"'}, 'erase': {}, 'get_bounding_box': {}, 'get_figures_at_location': {}, 'move': {}, 'move_figure': {}, 'relocate_figure': {}, 'send_figure_to_back': {}, 'BringFigureToFront': {}, 'DeleteFigure': {}, 'DrawArc': {'style': 'None', 'arc_color': '"black"', 'line_width': '1', 'fill_color': 'None'}, 'DrawCircle': {'fill_color': 'None', 'line_color': '"black"', 'line_width': '1'}, 'DrawImage': {'filename': 'None', 'data': 'None', 'location': ''}, 'DrawLine': {'color': '"black"', 'width': '1'}, 'DrawOval': {'fill_color': 'None', 'line_color': 'None', 'line_width': '1'}, 'DrawPoint': {'size': '2', 'color': '"black"'}, 'DrawPolygon': {'fill_color': 'None', 'line_color': 'None', 'line_width': 'None'}, 'DrawRectangle': {'fill_color': 'None', 'line_color': 'None', 'line_width': 'None'}, 'DrawText': {'color': '"black"', 'font': 'None', 'angle': '0', 'text_location': '"center"'}, 'Erase': {}, 'GetBoundingBox': {}, 'GetFiguresAtLocation': {}, 'Move': {}, 'MoveFigure': {}, 'RelocateFigure': {}, 'SendFigureToBack': {}, 'HorizontalSeparator': {'color': 'None', 'pad': 'None', 'p': 'None', 'key': 'None', 'k': 'None'}, 'Image': {'source': 'None', 'filename': 'None', 'data': 'None', 'background_color': 'None', 'size': ''}, 'update_animation': {'time_between_frames': '0'}, 'update_animation_no_buffering': {'time_between_frames': '0'}, 'UpdateAnimation': {'time_between_frames': '0'}, 'Input': {'default_text': '""', 'size': ''}, 'set_ibeam_color': {'ibeam_color': 'None'}, 'Listbox': {'default_values': 'None', 'select_mode': 'None', 'change_submits': 'False', 'enable_events': 'False', 'bind_return_key': 'False', 'size': ''}, 'get_indexes': {}, 'get_list_values': {}, 'set_value': {}, 'GetIndexes': {}, 'GetListValues': {}, 'SetValue': {},'Menu': {'background_color': 'None', 'text_color': 'None', 'disabled_text_color': 'None', 'size': ''}, 'MenubarCustom': {'disabled_text_color': 'None', 'bar_font': 'None', 'font': 'None', 'tearoff': 'False', 'pad': '0', 'p': 'None', 'background_color': 'None', 'text_color': 'None', 'bar_background_color': 'None', 'bar_text_color': 'None', 'key': 'None', 'k': 'None'}, 'Multiline': {'default_text': '""', 'enter_submits': 'False', 'disabled': 'False', 'autoscroll': 'False', 'autoscroll_only_at_bottom': 'False', 'border_width': 'None', 'size': ''}, 'print': {'args': '*<1 or N object>', 'end': 'None', 'sep': 'None', 'text_color': 'None', 'background_color': 'None', 'justification': 'None', 'font': 'None', 'colors': 'None', 't': 'None', 'b': 'None', 'c': 'None', 'autoscroll': 'True'}, 'reroute_stderr_to_here': {}, 'reroute_stdout_to_here': {}, 'restore_stderr': {}, 'restore_stdout': {}, 'OptionMenu': {'default_value': 'None', 'size': ''}, 'Output': {'size': ''}, 'Pane': {'background_color': 'None', 'size': ''}, 'ProgressBar': {'orientation': 'None', 'size': ''}, 'update_bar': {'max': 'None'}, 'UpdateBar': {'max': 'None'}, 'Push': {'background_color': 'None'}, 'Radio': {'default': 'False', 'disabled': 'False', 'size': ''}, 'reset_group': {}, 'ResetGroup': {}, 'Sizer': {'h_pixels': '0', 'v_pixels': '0'}, 'Sizegrip': {'background_color': 'None', 'pad': 'None', 'p': ''}, 'Slider': {'range': ''}, 'Spin': {'initial_value': 'None', 'disabled': 'False', 'change_submits': 'False', 'enable_events': 'False', 'readonly': 'False', 'size': ''}, 'StatusBar': {'size': ''}, 'Tab': {'title_color': 'None', 'background_color': 'None', 'font': 'None', 'pad': 'None', 'p': 'None', 'disabled': 'False', 'border_width': 'None', 'key': 'None', 'k': 'None', 'tooltip': 'None', 'right_click_menu': 'None', 'expand_x': 'False', 'expand_y': 'False', 'visible': 'True', 'element_justification': '"left"', 'image_source': 'None', 'image_subsample': 'None', 'image_zoom': 'None', 'metadata': 'None'}, 'select': {}, 'Select': {}, 'TabGroup': {'tab_location': 'None', 'title_color': 'None', 'tab_background_color': 'None', 'selected_title_color': 'None', 'selected_background_color': 'None', 'background_color': 'None', 'focus_color': 'None', 'font': 'None', 'change_submits': 'False', 'enable_events': 'False', 'pad': 'None', 'p': 'None', 'border_width': 'None', 'tab_border_width': 'None', 'theme': 'None', 'key': 'None', 'k': 'None', 'size': ''}, 'add_tab': {}, 'find_key_from_tab_name': {}, 'FindKeyFromTabName': {}, 'Table': {'headings': 'None', 'visible_column_map': 'None', 'col_widths': 'None', 'cols_justification': 'None', 'def_col_width': '10', 'auto_size_columns': 'True', 'max_col_width': '20', 'select_mode': 'None', 'display_row_numbers': 'False', 'starting_row_number': '0', 'num_rows': 'None', 'row_height': 'None', 'font': 'None', 'justification': '"right"', 'text_color': 'None', 'background_color': 'None', 'alternating_row_color': 'None', 'selected_row_colors': ''}, 'Text': {'text': '""', 'size': ''}, 'fonts_installed_list': {}, 'Titlebar': {'title': '""', 'icon': 'None', 'text_color': 'None', 'background_color': 'None', 'font': 'None', 'key': 'None', 'k': 'None'}, 'Tree': {'data': 'None', 'headings': 'None', 'visible_column_map': 'None', 'col_widths': 'None', 'col0_width': '10', 'col0_heading': '""', 'def_col_width': '10', 'auto_size_columns': 'True', 'max_col_width': '20', 'select_mode': 'None', 'show_expanded': 'False', 'change_submits': 'False', 'enable_events': 'False', 'click_toggles_select': 'None', 'font': 'None', 'justification': '"right"', 'text_color': 'None', 'border_width': 'None', 'background_color': 'None', 'selected_row_colors': ''}, 'add_treeview_data': {}, 'TreeData': {}, 'Node': {'icon': 'None'}, 'insert': {'icon': 'None'}, 'Insert': {'icon': 'None'}, 'VerticalSeparator': {'color': 'None', 'pad': 'None', 'p': 'None', 'key': 'None', 'k': 'None'}, 'VPush': {'background_color': 'None'}, 'Window': {'layout': 'None', 'default_element_size': 'None', 'default_button_element_size': ''}, 'add_rows': {}, 'bring_to_front': {}, 'close': {}, 'current_location': {'more_accurate': 'False', 'without_titlebar': 'False'}, 'ding': {'display_number': '0'}, 'disable': {}, 'disable_debugger': {}, 'disappear': {}, 'element_list': {}, 'enable': {}, 'enable_debugger': {}, 'extend_layout': {}, 'fill': {}, 'finalize': {}, 'find_element': {'silent_on_error': 'False', 'supress_guessing': 'None', 'supress_raise': 'None'}, 'find_element_with_focus': {}, 'force_focus': {}, 'get_screen_dimensions': {}, 'get_screen_size': {}, 'grab_any_where_off': {}, 'grab_any_where_on': {}, 'hide': {}, 'keep_on_top_clear': {}, 'keep_on_top_set': {}, 'load_from_disk': {}, 'make_modal': {}, 'maximize': {}, 'minimize': {}, 'mouse_location': {}, 'move_to_center': {}, 'normal': {}, 'perform_long_operation': {}, 'read': {}, 'reappear': {}, 'refresh': {}, 'save_to_disk': {}, 'save_window_screenshot_to_disk': {'filename': 'None'}, 'send_to_back': {}, 'set_alpha': {}, 'set_icon': {'icon': 'None', 'pngbase64': 'None'}, 'set_min_size': {}, 'set_title': {}, 'set_transparent_color': {}, 'start_thread': {}, 'timer_get_active_timers': {}, 'timer_start': {'key': '"__TIMER EVENT__"', 'repeating': 'True'}, 'timer_stop': {}, 'timer_stop_all': {}, 'un_hide': {}, 'visibility_changed': {}, 'was_closed': {}, 'widget_to_element': {}, 'write_event_value': {}, 'AddRows': {}, 'BringToFront': {}, 'Close': {}, 'CurrentLocation': {'more_accurate': 'False', 'without_titlebar': 'False'}, 'Disable': {}, 'DisableDebugger': {}, 'Disappear': {}, 'Elem': {'silent_on_error': 'False', 'supress_guessing': 'None', 'supress_raise': 'None'}, 'Element': {'silent_on_error': 'False', 'supress_guessing': 'None', 'supress_raise': 'None'}, 'Enable': {}, 'EnableDebugger': {}, 'Fill': {}, 'Finalize': {}, 'Find': {'silent_on_error': 'False', 'supress_guessing': 'None', 'supress_raise': 'None'}, 'FindElement': {'silent_on_error': 'False'}, 'FindElementWithFocus': {}, 'GetScreenDimensions': {}, 'GrabAnyWhereOff': {}, 'GrabAnyWhereOn': {}, 'Hide': {}, 'LoadFromDisk': {}, 'Maximize': {}, 'Minimize': {}, 'Normal': {}, 'Read': {'timeout': 'None'}, 'Reappear': {}, 'Refresh': {}, 'SaveToDisk': {}, 'SendToBack': {}, 'SetAlpha': {}, 'SetIcon': {'icon': 'None', 'pngbase64': 'None'}, 'SetTransparentColor': {}, 'UnHide': {}, 'VisibilityChanged': {}, 'pin': {'vertical_alignment': 'None', 'shrink': 'True', 'expand_x': 'None', 'expand_y': 'None'}, 'vbottom': {'expand_x': 'None', 'expand_y': 'None', 'background_color': 'None'}, 'vcenter': {'expand_x': 'None', 'expand_y': 'None', 'background_color': 'None'}, 'vtop': {'expand_x': 'None', 'expand_y': 'None', 'background_color': 'None'}, 'SystemTray': {'menu': 'None', 'filename': 'None', 'data': 'None', 'data_base64': 'None', 'tooltip': 'None', 'metadata': 'None'}, 'notify': {'icon': '...', 'display_duration_in_ms': '3000', 'fade_in_duration': '1000', 'alpha': '0.9', 'location': 'None'}, 'show_message': {'filename': 'None', 'data': 'None', 'data_base64': 'None', 'messageicon': 'None', 'time': ''}, 'ShowMessage': {'filename': 'None', 'data': 'None', 'data_base64': 'None', 'messageicon': 'None', 'time': ''}, 'get_versions': {}, 'read_all_windows': {'timeout': 'None', 'timeout_key': '"__TIMEOUT__"'}, 'CalendarButton': {'target': ''}, 'Cancel': {'button_text': '"Cancel"', 'size': ''}, 'ColorChooserButton': {'target': ''}, 'Debug': {'button_text': '""', 'size': ''}, 'DummyButton': {'image_filename': 'None', 'image_data': 'None', 'image_size': ''}, 'Exit': {'button_text': '"Exit"', 'size': ''}, 'FileBrowse': {'button_text': '"Browse"', 'target': ''}, 'FileSaveAs': {'button_text': '"Save As..."', 'target': ''}, 'FilesBrowse': {'button_text': '"Browse"', 'target': ''}, 'FolderBrowse': {'button_text': '"Browse"', 'target': ''}, 'Help': {'button_text': '"Help"', 'size': ''}, 'No': {'button_text': '"No"', 'size': ''}, 'OK': {'button_text': '"OK"', 'size': ''}, 'Ok': {'button_text': '"Ok"', 'size': ''}, 'Open': {'button_text': '"Open"', 'size': ''}, 'Quit': {'button_text': '"Quit"', 'size': ''}, 'RealtimeButton': {'image_filename': 'None', 'image_data': 'None', 'image_size': ''}, 'Save': {'button_text': '"Save"', 'size': ''}, 'SaveAs': {'button_text': '"Save As..."', 'target': ''}, 'Submit': {'button_text': '"Submit"', 'size': ''}, 'Yes': {'button_text': '"Yes"', 'size': ''}, 'RButton': {'image_filename': 'None', 'image_data': 'None', 'image_size': ''}, 'ReadButton': {'image_filename': 'None', 'image_data': 'None', 'image_size': ''}, 'CButton': {'image_filename': 'None', 'image_data': 'None', 'image_size': ''}, 'CloseButton': {'image_filename': 'None', 'image_data': 'None', 'image_size': ''}, 'easy_print': {'args': '*<1 or N object>', 'size': ''}, 'easy_print_close': {}, 'eprint': {'args': '*<1 or N object>', 'size': ''}, 'sgprint': {'args': '*<1 or N object>', 'size': ''}, 'sgprint_close': {}, 'EasyPrint': {'args': '*<1 or N object>', 'size': ''}, 'EasyPrintClose': {}, 'Print': {'args': '*<1 or N object>', 'size': ''}, 'PrintClose': {}, 'cprint': {'args': '*<1 or N object>', 'end': 'None', 'sep': '" "', 'text_color': 'None', 'font': 'None', 't': 'None', 'background_color': 'None', 'b': 'None', 'colors': 'None', 'c': 'None', 'window': 'None', 'key': 'None', 'justification': 'None', 'autoscroll': 'True', 'erase_all': 'False'}, 'cprint_set_output_destination': {}, 'one_line_progress_meter': {'args': '*<1 or N object>', 'key': '"OK for 1 meter"', 'orientation': '"v"', 'bar_color': ''}, 'one_line_progress_meter_cancel': {'key': '"OK for 1 meter"'}, 'OneLineProgressMeter': {'args': '*<1 or N object>', 'key': '"OK for 1 meter"', 'orientation': '"v"', 'bar_color': ''}, 'OneLineProgressMeterCancel': {'key': '"OK for 1 meter"'}, 'popup': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'button_type': '0', 'auto_close': 'False', 'auto_close_duration': 'None', 'custom_text': ''}, 'popup_animated': {'message': 'None', 'background_color': 'None', 'text_color': 'None', 'font': 'None', 'no_titlebar': 'True', 'grab_anywhere': 'True', 'keep_on_top': 'True', 'location': ''}, 'popup_auto_close': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '0', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'True', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'popup_cancel': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'popup_error': {'args': '*<1 or N object>', 'title': 'None', 'button_color': ''}, 'popup_error_with_traceback': {'emoji': 'None'}, 'popup_get_date': {'start_mon': 'None', 'start_day': 'None', 'start_year': 'None', 'begin_at_sunday_plus': '0', 'no_titlebar': 'True', 'title': '"Choose Date"', 'keep_on_top': 'True', 'location': ''}, 'popup_get_file': {'title': 'None', 'default_path': '""', 'default_extension': '""', 'save_as': 'False', 'multiple_files': 'False', 'file_types': ''}, 'popup_get_folder': {'title': 'None', 'default_path': '""', 'no_window': 'False', 'size': ''}, 'popup_get_text': {'title': 'None', 'default_text': '""', 'password_char': '""', 'size': ''}, 'popup_menu': {'title': 'None', 'location': ''}, 'popup_no_buttons': {'args': '*<1 or N object>', 'title': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'popup_no_titlebar': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '0', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'grab_anywhere': 'True', 'keep_on_top': 'None', 'location': ''}, 'popup_non_blocking': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '0', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'True', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'popup_notify': {'args': '*<1 or N object>', 'title': '""', 'icon': '...', 'display_duration_in_ms': '3000', 'fade_in_duration': '1000', 'alpha': '0.9', 'location': 'None'}, 'popup_ok': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'popup_ok_cancel': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': '...', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'popup_quick': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '0', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'True', 'auto_close_duration': '2', 'non_blocking': 'True', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'popup_quick_message': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '5', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'True', 'auto_close_duration': '2', 'non_blocking': 'True', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'True', 'grab_anywhere': 'False', 'keep_on_top': 'True', 'location': ''}, 'popup_scrolled': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'yes_no': 'False', 'no_buttons': 'False', 'button_justification': '"l"', 'auto_close': 'False', 'auto_close_duration': 'None', 'size': ''}, 'popup_yes_no': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'sprint': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'yes_no': 'False', 'no_buttons': 'False', 'button_justification': '"l"', 'auto_close': 'False', 'auto_close_duration': 'None', 'size': ''}, 'ScrolledTextBox': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'yes_no': 'False', 'no_buttons': 'False', 'button_justification': '"l"', 'auto_close': 'False', 'auto_close_duration': 'None', 'size': ''}, 'Popup': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'button_type': '0', 'auto_close': 'False', 'auto_close_duration': 'None', 'custom_text': ''}, 'PopupAnimated': {'message': 'None', 'background_color': 'None', 'text_color': 'None', 'font': 'None', 'no_titlebar': 'True', 'grab_anywhere': 'True', 'keep_on_top': 'True', 'location': ''}, 'PopupAnnoying': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '0', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'grab_anywhere': 'True', 'keep_on_top': 'None', 'location': ''}, 'PopupAutoClose': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '0', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'True', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'PopupCancel': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'PopupError': {'args': '*<1 or N object>', 'title': 'None', 'button_color': ''}, 'PopupGetFile': {'title': 'None', 'default_path': '""', 'default_extension': '""', 'save_as': 'False', 'multiple_files': 'False', 'file_types': ''}, 'PopupGetFolder': {'title': 'None', 'default_path': '""', 'no_window': 'False', 'size': ''}, 'PopupGetText': {'title': 'None', 'default_text': '""', 'password_char': '""', 'size': ''}, 'PopupNoBorder': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '0', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'grab_anywhere': 'True', 'keep_on_top': 'None', 'location': ''}, 'PopupNoButtons': {'args': '*<1 or N object>', 'title': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'PopupNoFrame': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '0', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'grab_anywhere': 'True', 'keep_on_top': 'None', 'location': ''}, 'PopupNoTitlebar': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '0', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'grab_anywhere': 'True', 'keep_on_top': 'None', 'location': ''}, 'PopupNonBlocking': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '0', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'True', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'PopupOK': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'PopupOKCancel': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': '...', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'PopupQuick': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '0', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'True', 'auto_close_duration': '2', 'non_blocking': 'True', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'PopupQuickMessage': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '5', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'True', 'auto_close_duration': '2', 'non_blocking': 'True', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'True', 'grab_anywhere': 'False', 'keep_on_top': 'True', 'location': ''}, 'PopupScrolled': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'yes_no': 'False', 'no_buttons': 'False', 'button_justification': '"l"', 'auto_close': 'False', 'auto_close_duration': 'None', 'size': ''}, 'PopupTimed': {'args': '*<1 or N object>', 'title': 'None', 'button_type': '0', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'True', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'PopupYesNo': {'args': '*<1 or N object>', 'title': 'None', 'button_color': 'None', 'background_color': 'None', 'text_color': 'None', 'auto_close': 'False', 'auto_close_duration': 'None', 'non_blocking': 'False', 'icon': 'None', 'line_width': 'None', 'font': 'None', 'no_titlebar': 'False', 'grab_anywhere': 'False', 'keep_on_top': 'None', 'location': ''}, 'obj_to_string': {'extra': '"    "'}, 'obj_to_string_single_obj': {}, 'main': {}, 'main_get_debug_data': {'suppress_popup': 'False'}, 'main_global_pysimplegui_settings': {}, 'main_sdk_help': {}, 'test': {}, 'show_debugger_popout_window': {'location': ''}, 'show_debugger_window': {'location': ''}, 'theme': {'new_theme': 'None'}, 'theme_add_new': {}, 'theme_background_color': {'color': 'None'}, 'theme_border_width': {'border_width': 'None'}, 'theme_button_color': {'color': 'None'}, 'theme_button_color_background': {}, 'theme_button_color_text': {}, 'theme_element_background_color': {'color': 'None'}, 'theme_element_text_color': {'color': 'None'}, 'theme_global': {'new_theme': 'None'}, 'theme_input_background_color': {'color': 'None'}, 'theme_input_text_color': {'color': 'None'}, 'theme_list': {}, 'theme_previewer': {'columns': '12', 'scrollable': 'False', 'scroll_area_size': ''}, 'theme_previewer_swatches': {}, 'theme_progress_bar_border_width': {'border_width': 'None'}, 'theme_progress_bar_color': {'color': 'None'}, 'theme_slider_border_width': {'border_width': 'None'}, 'theme_slider_color': {'color': 'None'}, 'theme_text_color': {'color': 'None'}, 'theme_text_element_background_color': {'color': 'None'}, 'theme_use_custom_titlebar': {}, 'running_linux': {}, 'running_mac': {}, 'running_trinket': {}, 'running_windows': {}, 'UserSettings': {'filename': 'None', 'path': 'None', 'silent_on_error': 'False', 'autosave': 'True', 'use_config_file': 'None', 'convert_bools_and_none': 'True'}, 'delete_entry': {'section': 'None', 'silent_on_error': 'None'}, 'delete_file': {'filename': 'None', 'path': 'None', 'report_error': 'False'}, 'delete_section': {}, 'exists': {'filename': 'None', 'path': 'None'}, 'get_dict': {}, 'get_filename': {'filename': 'None', 'path': 'None'}, 'load': {'filename': 'None', 'path': 'None'}, 'save': {'filename': 'None', 'path': 'None'}, 'set': {}, 'set_default_value': {}, 'set_location': {'filename': 'None', 'path': 'None'}, 'write_new_dictionary': {}, 'user_settings': {}, 'user_settings_delete_entry': {'silent_on_error': 'None'}, 'user_settings_delete_filename': {'filename': 'None', 'path': 'None', 'report_error': 'False'}, 'user_settings_file_exists': {'filename': 'None', 'path': 'None'}, 'user_settings_filename': {'filename': 'None', 'path': 'None'}, 'user_settings_get_entry': {'default': 'None'}, 'user_settings_load': {'filename': 'None', 'path': 'None'}, 'user_settings_save': {'filename': 'None', 'path': 'None'}, 'user_settings_set_entry': {}, 'user_settings_silent_on_error': {'silent_on_error': 'False'}, 'user_settings_write_new_dictionary': {}, 'execute_command_subprocess': {'args': '*<1 or N object>', 'wait': 'False', 'cwd': 'None', 'pipe_output': 'False', 'merge_stderr_with_stdout': 'True', 'stdin': 'None'}, 'execute_editor': {'line_number': 'None'}, 'execute_file_explorer': {'folder_to_open': '""'}, 'execute_find_callers_filename': {}, 'execute_get_results': {'timeout': 'None'}, 'execute_py_file': {'parms': 'None', 'cwd': 'None', 'interpreter_command': 'None', 'wait': 'False', 'pipe_output': 'False', 'merge_stderr_with_stdout': 'True'}, 'execute_subprocess_still_running': {}, 'clipboard_get': {}, 'clipboard_set': {}, 'fill_form_with_values': {}, 'FillFormWithValues': {}, 'set_global_icon': {}, 'set_options': {'icon': 'None', 'button_color': 'None', 'element_size': ''}, 'SetGlobalIcon': {}, 'SetOptions': {'icon': 'None', 'button_color': 'None', 'element_size': ''}, 'ChangeLookAndFeel': {'force': 'False'}, 'ListOfLookAndFeelValues': {}, 'preview_all_look_and_feel_themes': {'columns': '12', 'scrollable': 'False', 'scroll_area_size': ''}, 'list_of_look_and_feel_values': {}, 'change_look_and_feel': {'force': 'False'}}
def get_desc():
    return {'button_text': {'Type': 'str', 'Meaning': 'Text to be displayed on the button'}, 'button_type': {'Type': 'int', 'Meaning': 'You should NOT be setting this directly. ONLY the shortcut functions set this'}, 'target': {'Type': 'str or (int, int)', 'Meaning': 'key or (row,col) target for the button. Note that -1 for column means 1 element to the left of this one. The constant ThisRow is used to indicate the current row. The Button itself is a valid target for some types of button'}, 'tooltip': {'Type': 'str', 'Meaning': 'text, that will appear when mouse hovers over the element'}, 'file_types': {'Type': 'Tuple[(str, str), ...]', 'Meaning': 'the filetypes that will be used to match files. To indicate all files: (("ALL Files", ".*"),).'}, 'initial_folder': {'Type': 'str', 'Meaning': 'starting path for folders and files'}, 'default_extension': {'Type': 'str', 'Meaning': 'If no extension entered by user, add this to filename (only used in saveas dialogs)'}, 'disabled': {'Type': '(bool or str)', 'Meaning': 'If True button will be created disabled. If BUTTON_DISABLED_MEANS_IGNORE then the button will be ignored rather than disabled using tkinter'}, 'change_submits': {'Type': 'bool', 'Meaning': 'DO NOT USE. Only listed for backwards compat - Use enable_events instead'}, 'enable_events': {'Type': 'bool', 'Meaning': 'Turns on the element specific events. If this button is a target, should it generate an event when filled in'}, 'image_source': {'Type': '(str or bytes)', 'Meaning': 'Image to place on button. Use INSTEAD of the image_filename and image_data. Unifies these into 1 easier to use parm'}, 'image_filename': {'Type': 'str', 'Meaning': 'image filename if there is a button image. GIFs and PNGs only.'}, 'image_data': {'Type': 'bytes or str', 'Meaning': 'Raw or Base64 representation of the image to put on button. Choose either filename or data'}, 'image_size': {'Type': '(int, int)', 'Meaning': 'Size of the image in pixels (width, height)'}, 'image_subsample': {'Type': 'int', 'Meaning': 'amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc'}, 'image_zoom': {'Type': 'int', 'Meaning': 'amount to increase the size of the image. 2=twice size, 3=3 times, etc'}, 'border_width': {'Type': 'int', 'Meaning': 'width of border around button in pixels'}, 'size': {'Type': '(int or None, int or None)  or (None, None) or int', 'Meaning': '(w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1'}, 's': {'Type': '(int or None, int or None)  or (None, None) or int', 'Meaning': "Same as size parameter. It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used"}, 'auto_size_button': {'Type': 'bool', 'Meaning': 'if True the button size is sized to fit the text'}, 'button_color': {'Type': '(str, str) or str', 'Meaning': 'Color of button. default is from theme or the window. Easy to remember which is which if you say "ON" between colors. "red" on "green". Normally a tuple, but can be a simplified-button-color-string "foreground on background". Can be a single color if want to set only the background.'}, 'disabled_button_color': {'Type': '(str, str) or str', 'Meaning': "colors to use when button is disabled (text, background). Use None for a color if don't want to change. Only ttk buttons support both text and background colors. tk buttons only support changing text color"}, 'highlight_colors': {'Type': '(str, str)', 'Meaning': 'colors to use when button has focus (has focus, does not have focus). None will use colors based on theme. Only used by Linux and only for non-TTK button'}, 'mouseover_colors': {'Type': '(str, str) or str', 'Meaning': 'Important difference between Linux & Windows! Linux - Colors when mouse moved over button. Windows - colors when button is pressed. The default is to switch the text and background colors (an inverse effect)'}, 'use_ttk_buttons': {'Type': 'bool', 'Meaning': 'True = use ttk buttons. False = do not use ttk buttons. None (Default) = use ttk buttons only if on a Mac and not with button images'}, 'font': {'Type': '(str or (str, int[, str]) or None)', 'Meaning': "specifies the font family, size, etc. Tuple or Single string format 'name size styles'. Styles: italic * roman bold normal underline overstrike"}, 'bind_return_key': {'Type': 'bool', 'Meaning': "If True then pressing the return key in an Input or Multiline Element will cause this button to appear to be clicked (generates event with this button's key"}, 'focus': {'Type': 'bool', 'Meaning': 'if True, initial focus will be put on this button'}, 'pad': {'Type': '(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int', 'Meaning': "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)"}, 'p': {'Type': '(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int', 'Meaning': "Same as pad parameter. It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used"}, 'key': {'Type': 'str or int or tuple or object', 'Meaning': 'Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element'}, 'k': {'Type': 'str or int or tuple or object', 'Meaning': 'Same as the Key. You can use either k or key. Which ever is set will be used.'}, 'right_click_menu': {'Type': 'List[List[ List[str] or str ]]', 'Meaning': 'A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.'}, 'expand_x': {'Type': 'bool', 'Meaning': 'If True the element will automatically expand in the X direction to fill available space'}, 'expand_y': {'Type': 'bool', 'Meaning': 'If True the element will automatically expand in the Y direction to fill available space'}, 'visible': {'Type': 'bool', 'Meaning': 'set visibility state of the element'}, 'metadata': {'Type': 'Any', 'Meaning': 'User metadata that can be set to ANYTHING'}}
def create_element_by_type(element_type):
    if element_type == 'str':
        return sg.InputText("", key="input_str")
    elif element_type == 'int':
        return sg.InputText("", key="input_int", size=(10, 1), do_not_clear=True, enable_events=True)
    elif element_type == 'str or (int, int)':
        # User can choose between str and (int, int)
        return sg.InputText("", key="input_str_or_int_tuple", size=(10, 1), do_not_clear=True, enable_events=True)
    elif element_type == 'Tuple[(str, str), ...]':
        # User provides a string representation of the tuple
        return sg.InputText("", key="input_tuple_str_str", size=(10, 1), do_not_clear=True, enable_events=True)
    elif element_type == '(bool or str)':
        # User can choose between bool and str
        return sg.InputText("", key="input_bool_or_str", size=(10, 1), do_not_clear=True, enable_events=True)
    elif element_type == 'bool':
        return sg.Checkbox("Check", key="input_bool")
    elif element_type == '(str or bytes)':
        # User provides a string and we'll store it as bytes
        return sg.InputText("", key="input_str_or_bytes", size=(10, 1), do_not_clear=True, enable_events=True)
    elif element_type == 'bytes or str':
        # User provides a string and we'll store it as bytes
        return sg.InputText("", key="input_bytes_or_str", size=(10, 1), do_not_clear=True, enable_events=True)
    elif element_type == '(int, int)':
        return sg.InputText("", key="input_int_tuple", size=(10, 1), do_not_clear=True, enable_events=True)
    # Add more cases for other types here
    else:
        return sg.Text(f"Type '{element_type}' not supported")

def is_int(value):
    try:
        int(value)
        return True
    except ValueError:
        return False

def is_str_or_int_tuple(value):
    if is_int_tuple(value):
        return True
    try:
        str(value)
        return True
    except ValueError:
        return False

def is_tuple_of_str_str(value):
    try:
        tuple_value = ast.literal_eval(value)
        if not isinstance(tuple_value, tuple):
            return False
        for item in tuple_value:
            if not isinstance(item, tuple) or len(item) != 2:
                return False
            if not (isinstance(item[0], str) and isinstance(item[1], str)):
                return False
        return True
    except (ValueError, SyntaxError):
        return False

def is_bool_or_str(value):
    if value.lower() == 'true' or value.lower() == 'false':
        return True
    try:
        str(value)
        return True
    except ValueError:
        return False

def is_bytes_or_str(value):
    try:
        str(value)
        return True
    except ValueError:
        try:
            bytes(value, encoding='utf-8')
            return True
        except ValueError:
            return False
def create_element_window(element_name):
    element_settings = []
    element_settings = create_new_element(get_element_choices()[element_name])
    layout = [[sg.Text(f"{name}:"), widget] for name, widget in element_settings.items()]
    layout.append([sg.Button("OK"), sg.Button("Cancel")])

    window = sg.Window(f"Create {element_name}", layout)

    new_element = None

    while True:
        event, values = window.read()

        if event in (sg.WIN_CLOSED, "Cancel"):
            break

        if event == "OK":
            new_element = create_element(element_name, values)
            break

    window.close()

    return new_element

def create_element(element_name, values):
    if element_name == "button":
        return sg.Button(values["button_text"], button_type=values["button_type"], key=values["target"])

    # Add more elements here if needed


def create_custom_window(user_layout):
    user_layout.append([sg.Button("Exit")])
    
    window = sg.Window("Custom Layout", [user_layout])
    
    while True:
        event, _ = window.read()

        if event in (sg.WIN_CLOSED, "Exit"):
            break
        
    window.close()

if __name__ == "__main__":
    main()
